// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.36.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Photos Library API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/photos/'>Photos Library API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>20190110 (1470)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/photos/'>
 *              https://developers.google.com/photos/</a>
 *      <tr><th>Discovery Name<td>photoslibrary
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Photos Library API can be found at
 * <a href='https://developers.google.com/photos/'>https://developers.google.com/photos/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.PhotosLibrary.v1
{
    /// <summary>The PhotosLibrary Service.</summary>
    public class PhotosLibraryService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public PhotosLibraryService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public PhotosLibraryService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            albums = new AlbumsResource(this);
            mediaItems = new MediaItemsResource(this);
            sharedAlbums = new SharedAlbumsResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "photoslibrary"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://photoslibrary.googleapis.com/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://photoslibrary.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif

        /// <summary>Available OAuth 2.0 scopes for use with the Photos Library API.</summary>
        public class Scope
        {
            /// <summary>View the photos, videos and albums in your Google Photos</summary>
            public static string DrivePhotosReadonly = "https://www.googleapis.com/auth/drive.photos.readonly";

            /// <summary>View and manage your Google Photos library</summary>
            public static string Photoslibrary = "https://www.googleapis.com/auth/photoslibrary";

            /// <summary>Add to your Google Photos library</summary>
            public static string PhotoslibraryAppendonly = "https://www.googleapis.com/auth/photoslibrary.appendonly";

            /// <summary>View your Google Photos library</summary>
            public static string PhotoslibraryReadonly = "https://www.googleapis.com/auth/photoslibrary.readonly";

            /// <summary>Manage photos added by this app</summary>
            public static string PhotoslibraryReadonlyAppcreateddata = "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata";

            /// <summary>Manage and add to shared albums on your behalf</summary>
            public static string PhotoslibrarySharing = "https://www.googleapis.com/auth/photoslibrary.sharing";

        }



        private readonly AlbumsResource albums;

        /// <summary>Gets the Albums resource.</summary>
        public virtual AlbumsResource Albums
        {
            get { return albums; }
        }

        private readonly MediaItemsResource mediaItems;

        /// <summary>Gets the MediaItems resource.</summary>
        public virtual MediaItemsResource MediaItems
        {
            get { return mediaItems; }
        }

        private readonly SharedAlbumsResource sharedAlbums;

        /// <summary>Gets the SharedAlbums resource.</summary>
        public virtual SharedAlbumsResource SharedAlbums
        {
            get { return sharedAlbums; }
        }
    }

    ///<summary>A base abstract class for PhotosLibrary requests.</summary>
    public abstract class PhotosLibraryBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new PhotosLibraryBaseServiceRequest instance.</summary>
        protected PhotosLibraryBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>OAuth bearer token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("bearer_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string BearerToken { get; set; }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Pretty-print response.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("pp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> Pp { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes PhotosLibrary parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "bearer_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "bearer_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "pp", new Google.Apis.Discovery.Parameter
                {
                    Name = "pp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "albums" collection of methods.</summary>
    public class AlbumsResource
    {
        private const string Resource = "albums";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public AlbumsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Adds an enrichment to a specified position in a defined album.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="albumId">Identifier of the album where the enrichment will be added.</param>
        public virtual AddEnrichmentRequest AddEnrichment(Google.Apis.PhotosLibrary.v1.Data.AddEnrichmentToAlbumRequest body, string albumId)
        {
            return new AddEnrichmentRequest(service, body, albumId);
        }

        /// <summary>Adds an enrichment to a specified position in a defined album.</summary>
        public class AddEnrichmentRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.AddEnrichmentToAlbumResponse>
        {
            /// <summary>Constructs a new AddEnrichment request.</summary>
            public AddEnrichmentRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.AddEnrichmentToAlbumRequest body, string albumId)
                : base(service)
            {
                AlbumId = albumId;
                Body = body;
                InitParameters();
            }


            /// <summary>Identifier of the album where the enrichment will be added.</summary>
            [Google.Apis.Util.RequestParameterAttribute("albumId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string AlbumId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.AddEnrichmentToAlbumRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "addEnrichment"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/albums/{+albumId}:addEnrichment"; }
            }

            /// <summary>Initializes AddEnrichment parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "albumId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "albumId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^[^/]+$",
                    });
            }

        }

        /// <summary>Creates an album in a user's Google Photos library.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual CreateRequest Create(Google.Apis.PhotosLibrary.v1.Data.CreateAlbumRequest body)
        {
            return new CreateRequest(service, body);
        }

        /// <summary>Creates an album in a user's Google Photos library.</summary>
        public class CreateRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.Album>
        {
            /// <summary>Constructs a new Create request.</summary>
            public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.CreateAlbumRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.CreateAlbumRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "create"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/albums"; }
            }

            /// <summary>Initializes Create parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Returns the album specified by the given album id.</summary>
        /// <param name="albumId">Identifier of the album to be requested.</param>
        public virtual GetRequest Get(string albumId)
        {
            return new GetRequest(service, albumId);
        }

        /// <summary>Returns the album specified by the given album id.</summary>
        public class GetRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.Album>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string albumId)
                : base(service)
            {
                AlbumId = albumId;
                InitParameters();
            }


            /// <summary>Identifier of the album to be requested.</summary>
            [Google.Apis.Util.RequestParameterAttribute("albumId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string AlbumId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/albums/{+albumId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "albumId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "albumId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^[^/]+$",
                    });
            }

        }

        /// <summary>Lists all albums shown to a user in the 'Albums' tab of the Google Photos app.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Lists all albums shown to a user in the 'Albums' tab of the Google Photos app.</summary>
        public class ListRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.ListAlbumsResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>A continuation token to get the next page of the results. Adding this to the request will
            /// return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken
            /// parameter in the response to the listAlbums request.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }

            /// <summary>Maximum number of albums to return in the response. The default number of albums to return at a
            /// time is 20. The maximum page size is 50.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/albums"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Marks an album as 'shared' and accessible to other users. This action can only be performed on
        /// albums which were created by the developer via the API.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="albumId">Identifier of the album to be shared. This album id must belong to an album created by the
        /// developer. .</param>
        public virtual ShareRequest Share(Google.Apis.PhotosLibrary.v1.Data.ShareAlbumRequest body, string albumId)
        {
            return new ShareRequest(service, body, albumId);
        }

        /// <summary>Marks an album as 'shared' and accessible to other users. This action can only be performed on
        /// albums which were created by the developer via the API.</summary>
        public class ShareRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.ShareAlbumResponse>
        {
            /// <summary>Constructs a new Share request.</summary>
            public ShareRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.ShareAlbumRequest body, string albumId)
                : base(service)
            {
                AlbumId = albumId;
                Body = body;
                InitParameters();
            }


            /// <summary>Identifier of the album to be shared. This album id must belong to an album created by the
            /// developer. .</summary>
            [Google.Apis.Util.RequestParameterAttribute("albumId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string AlbumId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.ShareAlbumRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "share"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/albums/{+albumId}:share"; }
            }

            /// <summary>Initializes Share parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "albumId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "albumId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^[^/]+$",
                    });
            }

        }
    }

    /// <summary>The "mediaItems" collection of methods.</summary>
    public class MediaItemsResource
    {
        private const string Resource = "mediaItems";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public MediaItemsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Creates one or more media items in a user's Google Photos library. If an album id is specified, the
        /// media item(s) are also added to the album. By default the media item(s) will be added to the end of the
        /// library or album.
        ///
        /// If an album id and position are both defined, then the media items will be added to the album at the
        /// specified position.
        ///
        /// If multiple media items are given, they will be inserted at the specified position.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual BatchCreateRequest BatchCreate(Google.Apis.PhotosLibrary.v1.Data.BatchCreateMediaItemsRequest body)
        {
            return new BatchCreateRequest(service, body);
        }

        /// <summary>Creates one or more media items in a user's Google Photos library. If an album id is specified, the
        /// media item(s) are also added to the album. By default the media item(s) will be added to the end of the
        /// library or album.
        ///
        /// If an album id and position are both defined, then the media items will be added to the album at the
        /// specified position.
        ///
        /// If multiple media items are given, they will be inserted at the specified position.</summary>
        public class BatchCreateRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.BatchCreateMediaItemsResponse>
        {
            /// <summary>Constructs a new BatchCreate request.</summary>
            public BatchCreateRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.BatchCreateMediaItemsRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.BatchCreateMediaItemsRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "batchCreate"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/mediaItems:batchCreate"; }
            }

            /// <summary>Initializes BatchCreate parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Returns the media item specified based on a given media item id.</summary>
        /// <param name="mediaItemId">Identifier of media item to be requested.</param>
        public virtual GetRequest Get(string mediaItemId)
        {
            return new GetRequest(service, mediaItemId);
        }

        /// <summary>Returns the media item specified based on a given media item id.</summary>
        public class GetRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.MediaItem>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string mediaItemId)
                : base(service)
            {
                MediaItemId = mediaItemId;
                InitParameters();
            }


            /// <summary>Identifier of media item to be requested.</summary>
            [Google.Apis.Util.RequestParameterAttribute("mediaItemId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string MediaItemId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/mediaItems/{+mediaItemId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "mediaItemId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "mediaItemId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^[^/]+$",
                    });
            }

        }

        /// <summary>Searches for media items in a user's Google Photos library. If no filters are set, then all media
        /// items in the user's library will be returned.
        ///
        /// If an album is set, all media items in the specified album will be returned.
        ///
        /// If filters are specified, anything that matches the filters from the user's library will be listed.
        ///
        /// If an album and filters are set, then this will result in an error.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual SearchRequest Search(Google.Apis.PhotosLibrary.v1.Data.SearchMediaItemsRequest body)
        {
            return new SearchRequest(service, body);
        }

        /// <summary>Searches for media items in a user's Google Photos library. If no filters are set, then all media
        /// items in the user's library will be returned.
        ///
        /// If an album is set, all media items in the specified album will be returned.
        ///
        /// If filters are specified, anything that matches the filters from the user's library will be listed.
        ///
        /// If an album and filters are set, then this will result in an error.</summary>
        public class SearchRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.SearchMediaItemsResponse>
        {
            /// <summary>Constructs a new Search request.</summary>
            public SearchRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.SearchMediaItemsRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.SearchMediaItemsRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "search"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/mediaItems:search"; }
            }

            /// <summary>Initializes Search parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }
    }

    /// <summary>The "sharedAlbums" collection of methods.</summary>
    public class SharedAlbumsResource
    {
        private const string Resource = "sharedAlbums";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public SharedAlbumsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Joins a shared album on behalf of the Google Photos user.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual JoinRequest Join(Google.Apis.PhotosLibrary.v1.Data.JoinSharedAlbumRequest body)
        {
            return new JoinRequest(service, body);
        }

        /// <summary>Joins a shared album on behalf of the Google Photos user.</summary>
        public class JoinRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.JoinSharedAlbumResponse>
        {
            /// <summary>Constructs a new Join request.</summary>
            public JoinRequest(Google.Apis.Services.IClientService service, Google.Apis.PhotosLibrary.v1.Data.JoinSharedAlbumRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.PhotosLibrary.v1.Data.JoinSharedAlbumRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "join"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/sharedAlbums:join"; }
            }

            /// <summary>Initializes Join parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Lists all shared albums shown to a user in the 'Sharing' tab of the Google Photos app.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Lists all shared albums shown to a user in the 'Sharing' tab of the Google Photos app.</summary>
        public class ListRequest : PhotosLibraryBaseServiceRequest<Google.Apis.PhotosLibrary.v1.Data.ListSharedAlbumsResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>A continuation token to get the next page of the results. Adding this to the request will
            /// return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken
            /// parameter in the response to the listSharedAlbums request.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }

            /// <summary>Maximum number of albums to return in the response. The default number of albums to return at a
            /// time is 20. The maximum page size is 50.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/sharedAlbums"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.PhotosLibrary.v1.Data
{    

    /// <summary>Request to add an enrichment to a specific album at a specific position.</summary>
    public class AddEnrichmentToAlbumRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The position where the enrichment will be inserted.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("albumPosition")]
        public virtual AlbumPosition AlbumPosition { get; set; } 

        /// <summary>The enrichment to be added.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("newEnrichmentItem")]
        public virtual NewEnrichmentItem NewEnrichmentItem { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class AddEnrichmentToAlbumResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] Enrichment which was added.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enrichmentItem")]
        public virtual EnrichmentItem EnrichmentItem { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Representation of an album in Google Photos. Albums are a container for media items. They contain an
    /// additional shareInfo property if they have been shared by the application.</summary>
    public class Album : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] A URL to the cover photo's bytes. This should not be used as is. Parameters should be
        /// appended to this URL before use. For example, '=w2048-h1024' will set the dimensions of the cover photo to
        /// have a width of 2048 px and height of 1024 px.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coverPhotoBaseUrl")]
        public virtual string CoverPhotoBaseUrl { get; set; } 

        /// <summary>[Output only] The cover photo media item id field may be empty</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coverPhotoMediaItemId")]
        public virtual string CoverPhotoMediaItemId { get; set; } 

        /// <summary>[Ouput only] Identifier for the album. This is a persistent identifier that can be used between
        /// sessions to identify this album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>[Output only] True if media items can be created in the album. This field is based on the scopes
        /// granted and permissions of the album. If the scopes are changed or permissions of the album are changed,
        /// this field will be updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("isWriteable")]
        public virtual System.Nullable<bool> IsWriteable { get; set; } 

        /// <summary>[Output only] The number of media items in the album</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaItemsCount")]
        public virtual System.Nullable<long> MediaItemsCount { get; set; } 

        /// <summary>[Output only] Google Photos URL for the album. The user needs to be signed in to their Google
        /// Photos account to access this link.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("productUrl")]
        public virtual string ProductUrl { get; set; } 

        /// <summary>[Output only] Information related to shared albums. This field is only populated if the album is a
        /// shared album, the developer created the album and the user has granted photoslibrary.sharing
        /// scope.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shareInfo")]
        public virtual ShareInfo ShareInfo { get; set; } 

        /// <summary>Name of the album displayed to the user in their Google Photos account. This string should not be
        /// more than 500 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Specifies a position in an album.</summary>
    public class AlbumPosition : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Type of position, for a media or enrichment item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("position")]
        public virtual string Position { get; set; } 

        /// <summary>The enrichment item to which the position is relative to. Only used when position type is
        /// AFTER_ENRICHMENT_ITEM.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("relativeEnrichmentItemId")]
        public virtual string RelativeEnrichmentItemId { get; set; } 

        /// <summary>The media item to which the position is relative to. Only used when position type is
        /// AFTER_MEDIA_ITEM.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("relativeMediaItemId")]
        public virtual string RelativeMediaItemId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request to create one or more media items in a user's Google Photos library. If an albumid is
    /// specified, the media items are also added to that album. albumPosition is optional and can only be specified if
    /// an albumId is set.</summary>
    public class BatchCreateMediaItemsRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of the album where the media item(s) will be added. They will also be added to the
        /// user's library. This is an optional field.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("albumId")]
        public virtual string AlbumId { get; set; } 

        /// <summary>Position in the album where the media item(s) will be added. If not specified, the media item(s)
        /// will be added to the end of the album (as per the default value which is LAST_IN_ALBUM). The request will
        /// fail if this field is present but no album_id is specified.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("albumPosition")]
        public virtual AlbumPosition AlbumPosition { get; set; } 

        /// <summary>List of media items to be created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("newMediaItems")]
        public virtual System.Collections.Generic.IList<NewMediaItem> NewMediaItems { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class BatchCreateMediaItemsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] List of media items which were created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("newMediaItemResults")]
        public virtual System.Collections.Generic.IList<NewMediaItemResult> NewMediaItemResults { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>This filter is used to define which results to return based on the contents of the media item.
    ///
    /// It is possible to specify a list of categories to include, and/or a list of categories to exclude. Within each
    /// list, the categories are combined with an OR. For example, if the content filter looks like:
    ///
    /// included_content_categories: [c1, c2, c3]
    ///
    /// It would get media items that contain (c1 OR c2 OR c3).
    ///
    /// And if the content filter looks like:
    ///
    /// excluded_content_categories: [c1, c2, c3]
    ///
    /// It would get media items that contain NOT (c1 OR c2 OR c3). You can also include some categories while excluding
    /// others, as in this proto:
    ///
    /// included_content_categories: [c1, c2], excluded_content_category: [c3, c4]
    ///
    /// It would get media items that contain (c1 OR c2) AND NOT (c3 OR c4).
    ///
    /// A category that appears in includedContentategories must not appear in excludedContentCategories.</summary>
    public class ContentFilter : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The set of categories that must NOT be present in the media items in the result. The items in the
        /// set are ORed. There is a maximum of 10 excludedContentCategories per request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("excludedContentCategories")]
        public virtual System.Collections.Generic.IList<string> ExcludedContentCategories { get; set; } 

        /// <summary>The set of categories that must be present in the media items in the result. The items in the set
        /// are ORed. There is a maximum of 10 includedContentCategories per request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("includedContentCategories")]
        public virtual System.Collections.Generic.IList<string> IncludedContentCategories { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Information about a user who contributed the media item. Note that this information is only included if
    /// the album containing the media item is shared, was created by you and you have the sharing scope.</summary>
    public class ContributorInfo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Display name of the contributor.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
        public virtual string DisplayName { get; set; } 

        /// <summary>URL to the profile picture of the contributor.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("profilePictureBaseUrl")]
        public virtual string ProfilePictureBaseUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request to create an album in Google Photos.</summary>
    public class CreateAlbumRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The album to be created.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("album")]
        public virtual Album Album { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a whole calendar date. The day may be 0 to represent a year and month where the day is not
    /// significant, e.g. a whole calendar month. The month may be 0 to represent a a day and a year where the month is
    /// not signficant, e.g. when you want to specify the same day in every month of a year or a specific year. The year
    /// may be 0 to represent a month and day independent of year, e.g. anniversary date.</summary>
    public class Date : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
        /// year/month where the day is not significant.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("day")]
        public virtual System.Nullable<int> Day { get; set; } 

        /// <summary>Month of year. Must be from 1 to 12, or 0 if specifying a date without a month.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("month")]
        public virtual System.Nullable<int> Month { get; set; } 

        /// <summary>Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("year")]
        public virtual System.Nullable<int> Year { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>This filter defines the allowed dates or date ranges for the media returned. It is possible to pick a
    /// set of specific dates and a set of date ranges.</summary>
    public class DateFilter : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>List of dates that the media items must have been created on. There is a maximum of 5 dates that
        /// can be included per request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dates")]
        public virtual System.Collections.Generic.IList<Date> Dates { get; set; } 

        /// <summary>List of dates ranges that the media items must have been created in. There is a maximum of 5 dates
        /// ranges that can be included per request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ranges")]
        public virtual System.Collections.Generic.IList<DateRange> Ranges { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Defines a range of dates. Both dates must be of the same format (see Date definition for
    /// more).</summary>
    public class DateRange : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The end date (included as part of the range) in the same format as the start date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("endDate")]
        public virtual Date EndDate { get; set; } 

        /// <summary>The start date (included as part of the range) in one of the formats described.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("startDate")]
        public virtual Date StartDate { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An enrichment item.</summary>
    public class EnrichmentItem : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of the enrichment item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Filters that can be applied to a media item search. If multiple filter options are specified, they are
    /// treated as AND with each other.</summary>
    public class Filters : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Filters the media items based on their content.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contentFilter")]
        public virtual ContentFilter ContentFilter { get; set; } 

        /// <summary>Filters the media items based on their creation date.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dateFilter")]
        public virtual DateFilter DateFilter { get; set; } 

        /// <summary>If set, the results will include media items that the user has archived. Defaults to false
        /// (archived media items are not included).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("includeArchivedMedia")]
        public virtual System.Nullable<bool> IncludeArchivedMedia { get; set; } 

        /// <summary>Filters the media items based on the type of media.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaTypeFilter")]
        public virtual MediaTypeFilter MediaTypeFilter { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request to join a shared album on behalf of the user. This uses a shareToken which can be acquired via
    /// the shareAlbum or listSharedAlbums calls.</summary>
    public class JoinSharedAlbumRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Token indicating the shared album to join on behalf of the user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shareToken")]
        public virtual string ShareToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response to successfully joining the shared album on behalf of the user.</summary>
    public class JoinSharedAlbumResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing
    /// degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard.
    /// Values must be within normalized ranges.</summary>
    public class LatLng : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The latitude in degrees. It must be in the range [-90.0, +90.0].</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual System.Nullable<double> Latitude { get; set; } 

        /// <summary>The longitude in degrees. It must be in the range [-180.0, +180.0].</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual System.Nullable<double> Longitude { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListAlbumsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] List of albums that were created by the user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("albums")]
        public virtual System.Collections.Generic.IList<Album> Albums { get; set; } 

        /// <summary>[Output only] Token to use to get the next set of albums. Populated if there are more albums to
        /// retrieve for this request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ListSharedAlbumsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] Token to use to get the next set of shared albums. Populated if there are more shared
        /// albums to retrieve for this request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>[Output only] List of shared albums that were requested.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sharedAlbums")]
        public virtual System.Collections.Generic.IList<Album> SharedAlbums { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Represents a physical location.</summary>
    public class Location : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Position of the location on the map.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latlng")]
        public virtual LatLng Latlng { get; set; } 

        /// <summary>Name of the location to be displayed.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locationName")]
        public virtual string LocationName { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An enrichment containing a single location.</summary>
    public class LocationEnrichment : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Location for this enrichment item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("location")]
        public virtual Location Location { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An enrichment containing a map, showing origin and destination locations.</summary>
    public class MapEnrichment : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Destination location for this enrichemt item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("destination")]
        public virtual Location Destination { get; set; } 

        /// <summary>Origin location for this enrichment item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("origin")]
        public virtual Location Origin { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Representation of a media item (e.g. photo, video etc.) in Google Photos.</summary>
    public class MediaItem : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A URL to the media item's bytes. This should not be used as is. For example, '=w2048-h1024' will
        /// set the dimensions of a media item of type photo to have a width of 2048 px and height of 1024 px.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseUrl")]
        public virtual string BaseUrl { get; set; } 

        /// <summary>Information about the user who created this media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contributorInfo")]
        public virtual ContributorInfo ContributorInfo { get; set; } 

        /// <summary>Description of the media item. This is shown to the user in the item's info section in the Google
        /// Photos app.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>The filename of the media item shown to the user in the Google Photos app (within the item's info
        /// section).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("filename")]
        public virtual string Filename { get; set; } 

        /// <summary>Identifier for the media item. This is a persistent identifier that can be used between sessions to
        /// identify this media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Metadata related to the media item, for example the height, width or creation time.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaMetadata")]
        public virtual MediaMetadata MediaMetadata { get; set; } 

        /// <summary>MIME type of the media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mimeType")]
        public virtual string MimeType { get; set; } 

        /// <summary>Google Photos URL for the media item. This link will only be available to the user if they're
        /// signed in.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("productUrl")]
        public virtual string ProductUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Metadata for a media item.</summary>
    public class MediaMetadata : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Time when the media item was first created (not when it was uploaded to Google Photos).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("creationTime")]
        public virtual object CreationTime { get; set; } 

        /// <summary>Original height (in pixels) of the media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        public virtual System.Nullable<long> Height { get; set; } 

        /// <summary>Metadata for a photo media type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("photo")]
        public virtual Photo Photo { get; set; } 

        /// <summary>Metadata for a video media type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("video")]
        public virtual Video Video { get; set; } 

        /// <summary>Original width (in pixels) of the media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        public virtual System.Nullable<long> Width { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>This filter defines the type of media items to be returned, for example videos or photos. All the
    /// specified media types are treated as an OR with each other.</summary>
    public class MediaTypeFilter : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The types of media items to be included. This field should only be populated with one media type,
        /// multiple media types will result in an error response.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaTypes")]
        public virtual System.Collections.Generic.IList<string> MediaTypes { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A new enrichment item to be added to an album, used by the AddEnrichmentToAlbum call.</summary>
    public class NewEnrichmentItem : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Location to be added to the album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locationEnrichment")]
        public virtual LocationEnrichment LocationEnrichment { get; set; } 

        /// <summary>Map to be added to the album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mapEnrichment")]
        public virtual MapEnrichment MapEnrichment { get; set; } 

        /// <summary>Text to be added to the album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("textEnrichment")]
        public virtual TextEnrichment TextEnrichment { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>New media item that will be created in a user's Google Photos account.</summary>
    public class NewMediaItem : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Description of the media item. This will be shown to the user in the item's info section in the
        /// Google Photos app. This string should not be more than 1000 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>A new media item that has been uploaded via the included uploadToken.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("simpleMediaItem")]
        public virtual SimpleMediaItem SimpleMediaItem { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Result of creating a new media item.</summary>
    public class NewMediaItemResult : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Media item created with the upload token. It is populated if no errors occurred and the media item
        /// was created successfully.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaItem")]
        public virtual MediaItem MediaItem { get; set; } 

        /// <summary>If an error occurred during the creation of this media item, this field will be populated with
        /// information related to the error. Details of this status can be found down below.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual Status Status { get; set; } 

        /// <summary>The upload token used to create this new media item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uploadToken")]
        public virtual string UploadToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Metadata that is specific to a photo, for example, ISO, focal length and exposure time. Some of these
    /// fields may be null or not included.</summary>
    public class Photo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Apeture f number of the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("apertureFNumber")]
        public virtual System.Nullable<float> ApertureFNumber { get; set; } 

        /// <summary>Brand of the camera which took the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cameraMake")]
        public virtual string CameraMake { get; set; } 

        /// <summary>Model of the camera which took the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cameraModel")]
        public virtual string CameraModel { get; set; } 

        /// <summary>Exposure time of the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposureTime")]
        public virtual object ExposureTime { get; set; } 

        /// <summary>Focal length of the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("focalLength")]
        public virtual System.Nullable<float> FocalLength { get; set; } 

        /// <summary>ISO of the photo.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("isoEquivalent")]
        public virtual System.Nullable<int> IsoEquivalent { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request to search for media items in a user's library.
    ///
    /// If the album id is specified, this call will return the list of media items in the album. If neither filters nor
    /// album id are specified, this call will return all media items in a user's Google Photos library.
    ///
    /// If filters are specified, this call will return all media items in the user's library which fulfills the
    /// criteria based upon the filters.
    ///
    /// Filters and album id must not both be set, as this will result in an invalid request.</summary>
    public class SearchMediaItemsRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of an album. If populated will list all media items in specified album. Cannot be set in
        /// conjunction with any filters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("albumId")]
        public virtual string AlbumId { get; set; } 

        /// <summary>Filters to apply to the request. Cannot be set in conjuction with an albumId.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("filters")]
        public virtual Filters Filters { get; set; } 

        /// <summary>Maximum number of media items to return in the response. The default number of media items to
        /// return at a time is 100. The maximum page size is 500.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pageSize")]
        public virtual System.Nullable<int> PageSize { get; set; } 

        /// <summary>A continuation token to get the next page of the results. Adding this to the request will return
        /// the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in
        /// the response to the searchMediaItems request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pageToken")]
        public virtual string PageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class SearchMediaItemsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] List of media items that match the search parameters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mediaItems")]
        public virtual System.Collections.Generic.IList<MediaItem> MediaItems { get; set; } 

        /// <summary>[Output only] Token to use to get the next set of media items. Its presence is the only reliable
        /// indicator of more media items being available in the next request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request to make an album shared in Google Photos.</summary>
    public class ShareAlbumRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Options to be set when converting the album to a shared album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sharedAlbumOptions")]
        public virtual SharedAlbumOptions SharedAlbumOptions { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class ShareAlbumResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>[Output only] Information about the shared album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shareInfo")]
        public virtual ShareInfo ShareInfo { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Information about albums that are shared. Note that this information is only included if the album was
    /// created by you and you have the sharing scope.</summary>
    public class ShareInfo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>A token which can be used to join this shared album on behalf of other users via the API.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shareToken")]
        public virtual string ShareToken { get; set; } 

        /// <summary>A link to the album that's now shared on the Google Photos website and app. Anyone with the link
        /// can access this shared album and see all of the items present in the album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shareableUrl")]
        public virtual string ShareableUrl { get; set; } 

        /// <summary>Options set for the shared album.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sharedAlbumOptions")]
        public virtual SharedAlbumOptions SharedAlbumOptions { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Options that control the sharing of an album.</summary>
    public class SharedAlbumOptions : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>True if the shared album allows collaborators (users who have joined the album) to add media items
        /// to it. Defaults to false.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("isCollaborative")]
        public virtual System.Nullable<bool> IsCollaborative { get; set; } 

        /// <summary>True if the shared album allows the owner and the collaborators (users who have joined the album)
        /// to add comments to the album. Defaults to false.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("isCommentable")]
        public virtual System.Nullable<bool> IsCommentable { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A simple media item to be created in Google Photos via an upload token.</summary>
    public class SimpleMediaItem : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Token identifying the media bytes which have been uploaded to Google.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uploadToken")]
        public virtual string UploadToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The `Status` type defines a logical error model that is suitable for different programming
    /// environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model
    /// is designed to be:
    ///
    /// - Simple to use and understand for most users - Flexible enough to meet unexpected needs
    ///
    /// # Overview
    ///
    /// The `Status` message contains three pieces of data: error code, error message, and error details. The error code
    /// should be an enum value of google.rpc.Code, but it may accept additional error codes if needed.  The error
    /// message should be a developer-facing English message that helps developers *understand* and *resolve* the error.
    /// If a localized user-facing error message is needed, put the localized message in the error details or localize
    /// it in the client. The optional error details may contain arbitrary information about the error. There is a
    /// predefined set of error detail types in the package `google.rpc` that can be used for common error conditions.
    ///
    /// # Language mapping
    ///
    /// The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire
    /// format. When the `Status` message is exposed in different client libraries and different wire protocols, it can
    /// be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped
    /// to some error codes in C.
    ///
    /// # Other uses
    ///
    /// The error model and the `Status` message can be used in a variety of environments, either with or without APIs,
    /// to provide a consistent developer experience across different environments.
    ///
    /// Example uses of this error model include:
    ///
    /// - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the
    /// normal response to indicate the partial errors.
    ///
    /// - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error
    /// reporting.
    ///
    /// - Batch operations. If a client uses batch request and batch response, the `Status` message should be used
    /// directly inside batch response, one for each error sub-response.
    ///
    /// - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of
    /// those operations should be represented directly using the `Status` message.
    ///
    /// - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any
    /// stripping needed for security/privacy reasons.</summary>
    public class Status : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The status code, which should be an enum value of google.rpc.Code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("code")]
        public virtual System.Nullable<int> Code { get; set; } 

        /// <summary>A list of messages that carry the error details.  There is a common set of message types for APIs
        /// to use.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("details")]
        public virtual System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string,object>> Details { get; set; } 

        /// <summary>A developer-facing error message, which should be in English. Any user-facing error message should
        /// be localized and sent in the google.rpc.Status.details field, or localized by the client.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("message")]
        public virtual string Message { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An enrichment containing text.</summary>
    public class TextEnrichment : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Text for this text enrichment item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("text")]
        public virtual string Text { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Metadata that is specific to a video, for example, fps and processing status. Some of these fields may
    /// be null or not included.</summary>
    public class Video : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Brand of the camera which took the video.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cameraMake")]
        public virtual string CameraMake { get; set; } 

        /// <summary>Model of the camera which took the video.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cameraModel")]
        public virtual string CameraModel { get; set; } 

        /// <summary>Frame rate of the video.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fps")]
        public virtual System.Nullable<double> Fps { get; set; } 

        /// <summary>Processing status of the video.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
